name: Deploy to EKS

on:
  push:
    branches:
      - main  # Adjust this if you want to trigger on a different branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/wisecow-app:latest 

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This makes the deploy job dependent on the build job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Check if EKS cluster exists
        run: aws eks describe-cluster --name mycluster --region us-east-1

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name mycluster --region us-east-1

      - name: Apply Cluster Role and Role Binding
        run: |
          kubectl apply -f clusterrole.yaml
          kubectl apply -f clusterrolebinding.yaml

      - name: Apply Deployment and Service
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      - name: Verify Deployment
        run: |
          # Wait for the service to be fully set up
          sleep 30

          # List all services to verify the port mapping
          kubectl get services

          # Get the external IP or hostname for the service
          EXTERNAL_IP=$(kubectl get service wisecow-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # # Check if EXTERNAL_IP is empty and try IP if hostname not available
          # if [ -z "$EXTERNAL_IP" ]; then
          #   EXTERNAL_IP=$(kubectl get service wisecow-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          # fi

          # # If still empty, exit with error
          # if [ -z "$EXTERNAL_IP" ]; then
          #   echo "External IP or hostname not found. Exiting."
          #   exit 1
          # fi

          # Perform a health check against the service
          curl -f http://$EXTERNAL_IP:4499 || exit 1
